---
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Tag from "@components/Tag.astro";
import Datetime from "@components/Datetime";
import type { CollectionEntry } from "astro:content";
import { slugifyStr } from "@utils/slugify";
import ShareLinks from "@components/ShareLinks.astro";
import config from "@config";

export interface Props {
  post: CollectionEntry<"blog"> | CollectionEntry<"projects">;
  type: "blog" | "projects";
}

const { post, type } = Astro.props;

const {
  title,
  author,
  description,
  ogImage,
  canonicalURL,
  pubDatetime,
  modDatetime,
  tags,
  logo,
  link,
} = post.data;

const { Content } = await post.render();

const ogImageUrl = typeof ogImage === "string" ? ogImage : ogImage?.src;
const ogUrl = new URL(
  ogImageUrl ??
    (post.collection === "blog"
      ? `/posts/${slugifyStr(title)}.png`
      : `/projects/${slugifyStr(title)}.png`),
  Astro.url.origin,
).href;

const layoutProps = {
  title: `${title} | ${config.title}`,
  author,
  description,
  pubDatetime,
  modDatetime,
  canonicalURL,
  ogImage: ogUrl,
  scrollSmooth: true,
};
---

<Layout {...layoutProps}>
  <Header activeNav={type === "projects" ? "projects" : undefined} />

  <div class="mx-auto flex w-full max-w-3xl justify-start px-2">
    <button
      class="mt-8 mb-2 flex cursor-pointer hover:opacity-75"
      onclick="(() => (history.length === 1) ? window.location = '/' : history.back())()"
    >
      <svg xmlns="http://www.w3.org/2000/svg">
        <path
          d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
        ></path>
      </svg>
      <span>Go back</span>
    </button>
  </div>
  <main id="main-content" class="mx-auto w-full max-w-3xl px-4 pb-12">
    <h1
      transition:name={slugifyStr(title)}
      class="text-accent text-2xl font-semibold"
    >
      {title}
    </h1>
    <Datetime
      pubDatetime={pubDatetime}
      modDatetime={modDatetime}
      size="lg"
      className="my-2"
    />
    <article id="article" role="article" class="prose mx-auto mt-8 max-w-3xl">
      <!--LOGO-->
      {
        logo ? (
          <>
            <div class="mx-auto text-center">
              <img src={logo} alt={title} width="200" height="200" />
              <h1>{title}</h1>
              <p>
                <b>{description}</b>
              </p>
            </div>
          </>
        ) : null
      }

      <!--Project link-->
      {
        post.collection === "projects" && link ? (
          <div class="text-center">
            <a href={link} class="button" target="_blank">
              View Project
            </a>
          </div>
        ) : null
      }
      <Content />
    </article>

    <ul class="my-8">
      {tags.map((tag) => <Tag tag={slugifyStr(tag)} />)}
    </ul>

    <!-- Giscus comments -->
    <div class="giscus mb-8"></div>

    <div
      class="flex flex-col-reverse items-center justify-between gap-6 sm:flex-row-reverse sm:items-end sm:gap-4"
    >
      <button
        id="back-to-top"
        class="cursor-pointer py-1 whitespace-nowrap hover:opacity-75"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="rotate-90">
          <path
            d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
          ></path>
        </svg>
        <span>Back to Top</span>
      </button>

      <ShareLinks title={title} />
    </div>
  </main>
  <Footer />
</Layout>

<script is:inline data-astro-rerun>
  /** Create a progress indicator
   *  at the top */
  function createProgressBar() {
    // Create the main container div
    const progressContainer = document.createElement("div");
    progressContainer.className =
      "progress-container fixed top-0 z-10 h-1 w-full bg-background";

    // Create the progress bar div
    const progressBar = document.createElement("div");
    progressBar.className = "progress-bar h-1 w-0 bg-accent";
    progressBar.id = "myBar";

    // Append the progress bar to the progress container
    progressContainer.appendChild(progressBar);

    // Append the progress container to the document body or any other desired parent element
    document.body.appendChild(progressContainer);
  }
  createProgressBar();

  /** Update the progress bar
   *  when user scrolls */
  function updateScrollProgress() {
    const winScroll =
      document.body.scrollTop || document.documentElement.scrollTop;
    const height =
      document.documentElement.scrollHeight -
      document.documentElement.clientHeight;
    const scrolled = (winScroll / height) * 100;
    if (document) {
      const myBar = document.getElementById("myBar");
      if (myBar) {
        myBar.style.width = scrolled + "%";
      }
    }
  }
  document.addEventListener("scroll", updateScrollProgress);

  /** Attaches links to headings in the document,
   *  allowing sharing of sections easily */
  function addHeadingLinks() {
    const headings = Array.from(
      document.querySelectorAll("h2, h3, h4, h5, h6"),
    );
    for (const heading of headings) {
      heading.classList.add("group");
      const link = document.createElement("a");
      link.innerText = "#";
      link.className = "heading-link hidden group-hover:inline-block ml-2";
      link.href = "#" + heading.id;
      link.ariaHidden = "true";
      heading.appendChild(link);
    }
  }
  addHeadingLinks();

  /** Attaches copy buttons to code blocks in the document,
   * allowing users to copy code easily. */
  function attachCopyButtons() {
    const copyButtonLabel = "Copy";
    const codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (const codeBlock of codeBlocks) {
      const wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      const copyButton = document.createElement("button");
      copyButton.className =
        "copy-code absolute right-3 -top-3 rounded bg-card px-2 py-1 text-xs leading-4 text-base font-medium cursor-pointer";
      copyButton.innerHTML = copyButtonLabel;
      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);

      // wrap codebock with relative parent element
      codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      const code = block.querySelector("code");
      const text = code?.innerText;

      await navigator.clipboard.writeText(text ?? "");

      // visual feedback that task is completed
      button.innerText = "Copied";

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  }
  attachCopyButtons();

  // Load discus comments
  function loadDiscus() {
    const giscusAttributes = {
      src: "https://giscus.app/client.js",
      "data-repo": "cyprieng/cyprien.io",
      "data-repo-id": "R_kgDOME6MCQ",
      "data-category": "Announcements",
      "data-category-id": "DIC_kwDOME6MCc4CjqKi",
      "data-mapping": "pathname",
      "data-strict": "1",
      "data-reactions-enabled": "1",
      "data-emit-metadata": "0",
      "data-input-position": "top",
      "data-theme": themeValue || "preferred_color_scheme", // Use themeValue from toggle-theme.js
      "data-lang": "en",
      crossorigin: "anonymous",
      async: "",
    };

    const giscusScript = document.createElement("script");
    Object.entries(giscusAttributes).forEach(([key, value]) =>
      giscusScript.setAttribute(key, value),
    );
    document.body.appendChild(giscusScript);
  }
  loadDiscus();

  /** Scrolls the document to the top when
   * the "Back to Top" button is clicked. */
  function backToTop() {
    document.querySelector("#back-to-top")?.addEventListener("click", () => {
      document.body.scrollTop = 0; // For Safari
      document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
    });
  }
  backToTop();
</script>
