---
/**
 * Layout for displaying individual post or project details with comments and sharing.
 */

import MainLayout from "@layouts/MainLayout.astro";
import Tag from "@components/Tag.astro";
import { slugifyStr } from "@utils/slugify";
import ShareLinks from "@components/ShareLinks.astro";
import PostDatetime from "@components/PostDatetime.astro";
import { isProject } from "@content/config";
import type { AnyCollectionEntry } from "@utils/contentConfig";

export interface Props {
  post: AnyCollectionEntry; // Post or project entry to display
}

// Get post data
const { post } = Astro.props;
const {
  title,
  description,
  canonicalURL,
  publicationDatetime,
  updateDatetime,
  tags,
} = post.data;

// Logo and link for projects
let logo: string | undefined;
let link: string | undefined;
let isProjectType = false;
if (isProject(post)) {
  isProjectType = true;
  logo = post.data.logo;
  link = post.data.link;
}

const { Content } = await post.render();

const ogUrl = new URL(
  post.collection === "blog"
    ? `/posts/${slugifyStr(title)}.png`
    : `/projects/${slugifyStr(title)}.png`,
  Astro.url.origin,
).href;

const layoutProps = {
  title,
  description,
  publicationDatetime,
  updateDatetime,
  canonicalURL,
  ogImage: ogUrl,
};
---

<MainLayout
  {...layoutProps}
  backButton={true}
  activeNav={isProjectType ? "projects" : undefined}
>
  <PostDatetime
    publicationDatetime={publicationDatetime}
    updateDatetime={updateDatetime}
    className="my-2"
  />
  <article
    id="article"
    role="article"
    class="prose mx-auto mt-8 max-w-3xl"
    data-pagefind-body
  >
    <!--LOGO-->
    {
      logo ? (
        <>
          <div class="mx-auto text-center">
            <img src={logo} alt={title} width="200" height="200" />
            <h1>{title}</h1>
            <p>
              <b>{description}</b>
            </p>
          </div>
        </>
      ) : null
    }

    <!--Project link-->
    {
      post.collection === "projects" && link ? (
        <div class="text-center">
          <a href={link} class="button" target="_blank">
            View Project
          </a>
        </div>
      ) : null
    }
    <Content />
  </article>

  <ul class="my-8">
    {tags.map((tag) => <Tag tag={slugifyStr(tag)} />)}
  </ul>

  <!-- Giscus comments -->
  <div class="giscus mb-8"></div>

  <div
    class="flex flex-col-reverse items-center justify-between gap-6 sm:flex-row-reverse sm:items-end sm:gap-4"
  >
    <button
      id="back-to-top"
      class="cursor-pointer py-1 whitespace-nowrap hover:opacity-75"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="rotate-90">
        <path
          d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
        ></path>
      </svg>
      <span>Back to Top</span>
    </button>

    <ShareLinks title={title} />
  </div>
</MainLayout>

<script is:inline data-astro-rerun>
  /**
   * Creates a progress indicator bar at the top of the page to show reading progress
   */
  function createProgressBar() {
    // Create the main container div
    const progressContainer = document.createElement("div");
    progressContainer.className =
      "progress-container fixed top-0 z-10 h-1 w-full bg-background";

    // Create the progress bar div
    const progressBar = document.createElement("div");
    progressBar.className = "progress-bar h-1 w-0 bg-accent";
    progressBar.id = "myBar";

    // Append the progress bar to the progress container
    progressContainer.appendChild(progressBar);

    // Append the progress container to the document body or any other desired parent element
    document.body.appendChild(progressContainer);
  }
  createProgressBar();

  /**
   * Updates the progress bar width based on scroll position
   */
  function updateScrollProgress() {
    const winScroll =
      document.body.scrollTop || document.documentElement.scrollTop;
    const height =
      document.documentElement.scrollHeight -
      document.documentElement.clientHeight;
    const scrolled = (winScroll / height) * 100;
    if (document) {
      const myBar = document.getElementById("myBar");
      if (myBar) {
        myBar.style.width = scrolled + "%";
      }
    }
  }
  document.addEventListener("scroll", updateScrollProgress);

  /**
   * Attaches clickable anchor links to all headings in the document for easy section sharing
   */
  function addHeadingLinks() {
    const headings = Array.from(
      document.querySelectorAll("h2, h3, h4, h5, h6"),
    );
    for (const heading of headings) {
      heading.classList.add("group");
      const link = document.createElement("a");
      link.innerText = "#";
      link.className = "heading-link hidden group-hover:inline-block ml-2";
      link.href = "#" + heading.id;
      link.ariaHidden = "true";
      heading.appendChild(link);
    }
  }
  addHeadingLinks();

  /**
   * Attaches copy buttons to all code blocks in the document for easy code copying
   */
  function attachCopyButtons() {
    const copyButtonLabel = "Copy";
    const codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (const codeBlock of codeBlocks) {
      const wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      const copyButton = document.createElement("button");
      copyButton.className =
        "copy-code absolute right-3 -top-3 rounded bg-card px-2 py-1 text-xs leading-4 text-base font-medium cursor-pointer";
      copyButton.innerHTML = copyButtonLabel;
      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);

      // wrap codebock with relative parent element
      codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    /**
     * Copies the code content from a code block to the clipboard
     * @param {HTMLElement} block - The code block element containing the code to copy
     * @param {HTMLElement} button - The button element that triggered the copy action
     * @returns {Promise<void>}
     */
    async function copyCode(block, button) {
      const code = block.querySelector("code");
      const text = code?.innerText;

      await navigator.clipboard.writeText(text ?? "");

      // visual feedback that task is completed
      button.innerText = "Copied";

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  }
  attachCopyButtons();

  /**
   * Loads and initializes Giscus comments widget on the page with configured settings
   */
  function loadDiscus() {
    const giscusAttributes = {
      src: "https://giscus.app/client.js",
      "data-repo": "cyprieng/cyprien.io",
      "data-repo-id": "R_kgDOME6MCQ",
      "data-category": "Announcements",
      "data-category-id": "DIC_kwDOME6MCc4CjqKi",
      "data-mapping": "pathname",
      "data-strict": "1",
      "data-reactions-enabled": "1",
      "data-emit-metadata": "0",
      "data-input-position": "top",
      "data-theme": themeValue || "preferred_color_scheme", // Use themeValue from toggle-theme.js
      "data-lang": "en",
      crossorigin: "anonymous",
      async: "",
    };

    const giscusScript = document.createElement("script");
    Object.entries(giscusAttributes).forEach(([key, value]) =>
      giscusScript.setAttribute(key, value),
    );
    document.body.appendChild(giscusScript);
  }
  loadDiscus();

  /**
   * Attaches click handler to the "Back to Top" button to scroll document to top
   */
  function backToTop() {
    document.querySelector("#back-to-top")?.addEventListener("click", () => {
      document.body.scrollTop = 0; // For Safari
      document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
    });
  }
  backToTop();
</script>
